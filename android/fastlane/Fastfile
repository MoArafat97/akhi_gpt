# This file contains the fastlane.tools configuration
# You can find the documentation at https://docs.fastlane.tools
#
# For a list of all available actions, check out
#     https://docs.fastlane.tools/actions
#
# For a list of all available plugins, check out
#     https://docs.fastlane.tools/plugins/available-plugins

# Uncomment the line if you want fastlane to automatically update itself
# update_fastlane

default_platform(:android)

platform :android do
  desc "Deploy staging build to Google Play Internal Testing"
  lane :deploy_staging do
    # Build the Flutter app in release mode
    sh("cd ../.. && flutter build appbundle --release")
    
    # Optional: Upload to Google Play Internal Testing track
    # Uncomment the following lines if you want to upload staging builds to Play Console
    # upload_to_play_store(
    #   json_key_data: ENV['GOOGLE_PLAY_JSON_KEY'],
    #   aab: "../build/app/outputs/bundle/release/app-release.aab",
    #   track: "internal",
    #   skip_upload_metadata: true,
    #   skip_upload_images: true,
    #   skip_upload_screenshots: true
    # )
    
    UI.success("✅ Staging build completed successfully!")
    UI.message("📦 AAB file location: build/app/outputs/bundle/release/app-release.aab")
  end

  desc "Deploy production build to Google Play Production"
  lane :deploy_production do
    # Ensure we have all required environment variables
    ensure_env_vars(
      env_vars: [
        'ANDROID_KEYSTORE_PASSWORD',
        'ANDROID_KEY_ALIAS', 
        'ANDROID_KEY_PASSWORD',
        'GOOGLE_PLAY_JSON_KEY_PATH'
      ]
    )

    # Build the Flutter app with release signing
    sh("cd ../.. && flutter build appbundle --release --build-name=#{get_version_name} --build-number=#{get_version_code}")
    
    # Upload to Google Play Production track
    upload_to_play_store(
      json_key: ENV['GOOGLE_PLAY_JSON_KEY_PATH'],
      aab: "../build/app/outputs/bundle/release/app-release.aab",
      track: "production",
      skip_upload_metadata: true,
      skip_upload_images: true,
      skip_upload_screenshots: true,
      release_status: "draft" # Change to "completed" for immediate release
    )
    
    UI.success("🚀 Production deployment completed successfully!")
    UI.message("📱 App uploaded to Google Play Production track as draft")
    UI.message("🔗 Visit Google Play Console to review and publish the release")
  end

  desc "Get version name from pubspec.yaml"
  private_lane :get_version_name do
    pubspec_path = "../../pubspec.yaml"
    pubspec_content = File.read(pubspec_path)
    version_line = pubspec_content.match(/^version:\s*(.+)$/)[1]
    version_name = version_line.split('+')[0].strip
    UI.message("📋 Version name: #{version_name}")
    version_name
  end

  desc "Get version code from pubspec.yaml"
  private_lane :get_version_code do
    pubspec_path = "../../pubspec.yaml"
    pubspec_content = File.read(pubspec_path)
    version_line = pubspec_content.match(/^version:\s*(.+)$/)[1]
    version_code = version_line.split('+')[1]&.strip || "1"
    UI.message("🔢 Version code: #{version_code}")
    version_code
  end

  desc "Ensure required environment variables are set"
  private_lane :ensure_env_vars do |options|
    missing_vars = []
    options[:env_vars].each do |var|
      if ENV[var].nil? || ENV[var].empty?
        missing_vars << var
      end
    end
    
    unless missing_vars.empty?
      UI.user_error!("❌ Missing required environment variables: #{missing_vars.join(', ')}")
    end
    
    UI.success("✅ All required environment variables are set")
  end

  # Error handling
  error do |lane, exception|
    UI.error("❌ Error in lane '#{lane}': #{exception.message}")
    UI.error("🔍 Check the logs above for more details")
  end
end
